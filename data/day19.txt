// Registers 1-6 are denoted by A-F; B is (in this program) the IP
// Note that GOTOs are off-by-one since the IP is incremented after execution
// So line 0 GOTOs 17, despite B being set to 16.

// A: seeds extra large value, holds final result
// B: IP
// C: loop
// D: temp
// E: loop
// F: target value

// Instr. 2-15 are run F times, while instr. 3-11 are run F^2 times
// Instr. 7 is only run 12 times for F=950, which is number of unique divisors
// and the result, 1860, is the sum of those numbers.

// If A=1, F=10551350 and the sum of F's divisors is **20108088**
// https://www.wolframalpha.com/input/?i=sum+of+divisors+of+10551350

#ip 1
addi 1 16 1   //  0   GOTO 17
seti 1 8 2    //  1   C=1
seti 1 5 4    //  2   E=1
mulr 2 4 3    //  3   D=C*E
eqrr 3 5 3    //  4   D=D==F
addr 3 1 1    //  5   IF C*E==F GOTO 7
addi 1 1 1    //  6   GOTO 8
addr 2 0 0    //  7   A+=C      // Add C to A if C*E == F
addi 4 1 4    //  8   E++
gtrr 4 5 3    //  9   D=E>F
addr 1 3 1    // 10   IF E>F GOTO 12
seti 2 8 1    // 11   GOTO 3
addi 2 1 2    // 12   C++
gtrr 2 5 3    // 13   D=C>F
addr 3 1 1    // 14   IF C>F GOTO 16
seti 1 8 1    // 15   GOTO 2
mulr 1 1 1    // 16   GOTO 256   // halt
addi 5 2 5    // 17   F+=2       // build small F
mulr 5 5 5    // 18   F=F*F
mulr 1 5 5    // 19   F*=19
muli 5 11 5   // 20   F*=11
addi 3 5 3    // 21   D+=5
mulr 3 1 3    // 22   D*=22
addi 3 4 3    // 23   D+=4
addr 5 3 5    // 24   F+=D
addr 1 0 1    // 25   GOTO 26+A  // if A=1, build large F, otherwise...
seti 0 7 1    // 26   GOTO 1     // start loop
setr 1 1 3    // 27   D=27
mulr 3 1 3    // 28   D*=28
addr 1 3 3    // 29   D+=29
mulr 1 3 3    // 30   D*=30
muli 3 14 3   // 31   D*=14
mulr 3 1 3    // 32   D*=32
addr 5 3 5    // 33   F+=D
seti 0 9 0    // 34   A=0
seti 0 0 1    // 35   GOTO 1     // start loop with large F